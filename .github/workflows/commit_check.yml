name: Check commits and update submit_log

on:
  push:
    branches:
      - main 
    paths:
      - 'code/**'

jobs:
  check_commits:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get commit info and check for users
        id: get_commits
        run: |
          # Get today's date in the format day-month-year
          today=$(date '+%d-%m-%Y')

          # Get all commits in the directory for today
          commits=$(git log --since="midnight" --oneline ./code/${today}*)

          # Initialize an empty array for storing users
          users=()

          # Extract usernames from the commits
          while IFS= read -r commit; do
            # Get the username from each commit
            username=$(echo "$commit" | awk '{print $2}')
            if [[ ! " ${users[@]} " =~ " ${username} " ]]; then
              users+=("$username")
            fi
          done <<< "$commits"

          # Convert array of users to a JSON-compatible string
          users_json=$(printf '"%s", ' "${users[@]}")
          users_json="[${users_json%, }]"

          # Set output with users and the date
          echo "USERS_JSON=$users_json" >> $GITHUB_ENV
          echo "DATE=$today" >> $GITHUB_ENV

      - name: Ensure the submit_log.json exists
        run: |
          # Ensure the docs/challenges/data directory exists
          mkdir -p docs/challenges/data

          # Check if submit_log.json exists, if not create it with an empty array
          if [ ! -f docs/challenges/data/submit_log.json ]; then
            echo "[]" > docs/challenges/data/submit_log.json
          fi

      - name: Update submit_log.json with commit users
        run: |
          # Get the current content of submit_log.json
          current_log=$(cat docs/challenges/data/submit_log.json)

          # Check if the current day is already in the log
          existing_entry=$(echo "$current_log" | jq -r --arg date "$DATE" '.[] | select(.day == $date)')

          if [ "$existing_entry" != "null" ]; then
            # If the entry for today exists, add the users to the existing list
            updated_users=$(echo "$existing_entry" | jq --argjson new_users "$USERS_JSON" '.users += $new_users | unique')
            updated_log=$(echo "$current_log" | jq --arg date "$DATE" --argjson users "$updated_users" '. |= map(if .day == $date then .users = $users else . end)')
          else
            # If the entry for today doesn't exist, create a new entry with the users
            new_entry="{\"day\": \"$DATE\", \"users\": $USERS_JSON}"
            updated_log=$(echo "$current_log" | jq ". += [$new_entry]")
          fi

          # Write the updated log back to the file
          echo "$updated_log" > docs/challenges/data/submit_log.json

      - name: Commit changes to submit_log.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ensure changes are staged
          git add docs/challenges/data/submit_log.json

          # Check if changes are staged
          git status

          # Commit the changes if there are any
          git commit -m "Update submit_log for ${{ env.DATE }}" || echo "No changes to commit"
          
          # Push changes to repository
          git push origin
